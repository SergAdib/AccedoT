{"version":3,"names":[],"mappings":"","sources":["Build.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _listcontroller = require('./listcontroller');\n\nvar _historycontroller = require('./historycontroller');\n\nvar Movies = angular.module('Movies', []);\nMovies.controller('listController', _listcontroller.listController);\nMovies.controller('historyController', _historycontroller.historyController);\n\n// @ End of main module\n},{\"./historycontroller\":2,\"./listcontroller\":4}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.historyController = historyController;\n\nvar _idmaker = require('./idmaker');\n\nfunction historyController($scope, $http) {\n  $scope.history = {};\n  $scope.gotHistory = {};\n  $scope.storedHistory = {};\n  $scope.watched = {};\n  $scope.watchedList = [];\n\n  // AJAX operations with server/DB on history Collection\n  // // Get the history instance\n  $scope.getHistory = function (id) {\n    $http.get('/api/history/' + id).success(function (data) {\n      if (data) {\n        $scope.gotHistory = data;\n      }\n      console.log('History ready');\n    }).error(function (data) {\n      console.log('Error: ' + data);\n    });\n  };\n\n  // // Post data to update / create history record\n  // // // Simple update variant - bulk update\n  $scope.updateHistory = function () {\n    if ($scope.history.session_id) {\n      $scope.history.updatedDate = new Date();\n      $scope.saveStoredHistory();\n      $http.post('/api/history', $scope.history).success(function (data) {\n        console.log('History updated: ' + data);\n      }).error(function (data) {\n        console.log('Error: ' + data);\n      });\n    }\n  };\n\n  // // Delete history from Collection in DB\n  $scope.deleteHistory = function (id) {\n    $http.delete('/api/history/' + id).success(function (data) {\n      $scope.history = {};\n      $scope.deleteStoredHistory();\n      console.log('History deleted: ' + data);\n    }).error(function (data) {\n      console.log('Error: ' + data);\n    });\n  };\n\n  // Events for history\n  $scope.formWatched = function (id, title) {\n    var index = -1;\n    $scope.watched.id = id;\n    $scope.watched.title = title;\n    $scope.watched.watchDate = new Date();\n    index = watchedList.findIndex(function (x) {\n      return x.id == id && x.title == title;\n    });\n    if (index != -1) watchedList.splice(index, 1);\n    $scope.watchedList.push($scope.watched);\n  };\n\n  $scope.formHistory = function () {\n    if ($scope.storedHistory.session_id) {\n      if (!$scope.gotHistory.session_id) {\n        $scope.history = $scope.storedHistory;\n      } else if ($scope.storedHistory.updatedDate > $scope.gotHistory.updatedDate) {\n        $scope.history = $scope.storedHistory;\n      } else {\n        $scope.history = $scope.gotHistory;\n      }\n    } else {\n      $scope.history.watchedMovies = $scope.watchedList;\n      $scope.history.creationDate = new Date();\n      $scope.history.updatedDate = new Date();\n      $scope.history.session_id = _idmaker.myID.make();\n    }\n  };\n\n  $scope.saveStoredHistory = function () {\n    if (!history.session_id) return;\n    Lockr.set('storedHistory', $scope.history);\n  };\n\n  $scope.getStoredHistory = function () {\n    $scope.storedHistory = Lockr.get('storedHistory');\n  };\n\n  $scope.deleteStoredHistory = function () {\n    Lockr.rm('storedHistory');\n  };\n}\n// @End of history Controller\n// @Angular controller for watched movie list / history representation\n},{\"./idmaker\":3}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// @ Make a unique ID for history sessions\nvar myID = exports.myID = function () {\n    var counter = 0;\n    var id = '';\n    function _makeID() {\n        id = new Date().getTime().toString(36) + new Date().getMilliseconds().toString() + counter;\n        counter++;\n    }\n    return {\n        make: function make() {\n            _makeID();\n            return id;\n        },\n        reset: function reset() {\n            counter = 0;\n        },\n        set: function set(int) {\n            if (Number(int)) {\n                counter = parseInt(int);\n            } else {\n                counter++;\n            }\n        }\n    };\n}();\n\n// EOF\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listController = listController;\n// @Angular controller for movie list representation\n\nfunction listController($scope, $http) {\n  $scope.list = [];\n  $scope.count = 0;\n  $scope.update = {};\n\n  // AJAX operations with server/DB on movielist Collection\n  // // Get the movie list\n  $http.get('/api/mlist').success(function (data) {\n    if (data.total > 0) {\n      $scope.list = data.entries;\n      $scope.count = data.total;\n    }\n    console.log($scope.count);\n  }).error(function (data) {\n    console.log('Error: ' + data);\n  });\n\n  // // Post data to update / create new movie instance\n  // // // Operation not supported in current API and must return error\n  $scope.updateList = function () {\n    $http.post('/api/mlist', $scope.update).success(function (data) {\n      $scope.update = {};\n      console.log('Entry inserted: ' + data);\n    }).error(function (data) {\n      console.log('Error: ' + data);\n    });\n  };\n\n  // // Delete movie instance from list in DB\n  // // // Operation not supported in current API and must return error\n  $scope.deleteListItem = function (id, id2) {\n    $http.delete('/api/mlist/' + id + '/' + id2).success(function (data) {\n      console.log('Entry deleted: ' + data);\n    }).error(function (data) {\n      console.log('Error: ' + data);\n    });\n  };\n\n  // Events for movielist\n\n}\n// @End of movie list Controller\n},{}]},{},[1]);\n"],"file":"Build.js","sourceRoot":"/source/"}