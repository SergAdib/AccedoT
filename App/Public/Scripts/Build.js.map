{"version":3,"names":[],"mappings":"","sources":["Build.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _listcontroller = require('./listcontroller');\n\nvar _historycontroller = require('./historycontroller');\n\nvar _carouselcontroller = require('./carouselcontroller');\n\nvar Movies = angular.module('Movies', []);\n\nMovies.controller('listController', _listcontroller.listController);\nMovies.controller('historyController', _historycontroller.historyController);\nMovies.controller('carouselController', _carouselcontroller.carouselController);\n\n// @ End of main module\n},{\"./carouselcontroller\":3,\"./historycontroller\":4,\"./listcontroller\":6}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.carouselBuilder = carouselBuilder;\n// @Helper function for movie list representation\n// // This is to achieve workability of bootstrap carousel with angular loaded content\n\nfunction carouselBuilder(obj, counter) {\n\n  // Start building carousel items scheme\n  var tags = '';\n  for (var i = 0; i < counter; i++) {\n    tags += '<div class=\"item ' + obj[i].active + '\"><div class=\"col-xs-12 col-sm-4 col-md-2\">' + '<a href=\"#' + i + '\" onclick=\"expand(this);\"><img src=\"' + obj[i].images[0].url + '\" class=\"img-responsive\" alt=\"' + obj[i].images[0].type + '\" title=\"' + obj[i].title + '\"></a>' + '<div class=\"itemcaption\"><h3>' + obj[i].title + '</h3></div></div></div>' + '<!-- End of ' + i + ' slide tag -->';\n  }\n\n  // Apply scheme to carousel inner element\n  $('#InnerCarousel').append(tags);\n\n  // Make sure DOM loaded && start carousel\n  $(document).ready(function () {\n    // Set interval\n    $('#MovieCarousel').carousel({ interval: 5000 });\n    // Set multiple slides scrolling\n    $('#InnerCarousel .item').each(function () {\n      var itemToClone = $(this);\n      for (var i = 1; i < 6; i++) {\n        itemToClone = itemToClone.next();\n        if (!itemToClone.length) {\n          itemToClone = $(this).siblings(':first');\n        }\n        itemToClone.children(':first-child').clone().addClass(\"cloneditem-\" + i).appendTo($(this));\n      };\n    });\n  });\n}\n\n// EOF\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.carouselController = carouselController;\n// @Angular controller for movie list carousel\n\nfunction carouselController($scope) {\n\n  $scope.expand = function (id) {\n    id = id - 0;\n    var obj = $scope.list[id];\n    console.log(obj); // REMOVE ME :)\n    $(\"#MovieModalLabel\").text(obj.title);\n    $(\"#mmDescription\").text(obj.description);\n    $(\"#mmDate\").text(new Date(obj.publishedDate).toDateString());\n    $(\"#mmDuration\").text(obj.contents[0].duration / 1000 / 60 + \" min.\");\n    $(\"#mmRating\").text(formRating(obj.parentalRatings));\n    $(\"#mmCrew\").text(formCrew(obj.credits));\n    $(\"#mmActors\").text(formStars(obj.credits));\n    $(\"#mmGenre\").text(formGenre(obj.categories));\n    $(\"#mmImage\").empty().append(formPics(obj.images));\n    $(\"#mmVideo\").empty().append(formVideo(obj.contents));\n    adjustVideo(obj.id, obj.title, obj.contents[0].width, obj.contents[0].height, obj.images[0].url);\n\n    $('#MovieModal').modal();\n    setModalWidth(obj.contents[0].width);\n\n    $(\"#mmVideo\").bind({\n      pause: function pause() {\n        var time = this.currentTime;\n        $scope.$emit('movieRefreshed', [obj.id, obj.title, time]);\n        console.log('emit after pause');\n      },\n      ended: function ended() {\n        $scope.$emit('movieRefreshed', [obj.id, obj.title, 0]);\n        $(\"#MovieModal\").modal('hide');\n        console.log('emit after ended');\n      }\n    });\n  };\n\n  /* @TODO\n  3. make a history popup with video lunch\n  4. decorate frontend\n  */\n\n  function setModalWidth(x) {\n    var container = document.getElementById(\"MovieModalContent\");\n    var video = document.getElementById(\"mmVideo\");\n    var scape = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    if (scape - 60 < x) {\n      var w = x; // original width\n      var h = video.height;\n      var z = 0; // new height in % from new width\n      x = scape - 120;\n      z = Math.round(x * h / w);\n      video.width = x;\n      video.height = z;\n    }\n    var percent = Math.round((x + 60) / scape * 100);\n    var width = percent.toString() + \"%\";\n    container.style.width = width;\n  }\n\n  function formRating(arr) {\n    var st = '';\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var obj = _step.value;\n        st += ' ' + obj.scheme + ' / ' + obj.rating + ',';\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    st = st.substring(0, st.length - 1) + ';';\n    return st;\n  };\n\n  function formCrew(arr) {\n    var st = '';\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var obj = _step2.value;\n\n        if (obj.role != obj.name) st += ' ' + obj.role + ' ' + obj.name + ',';\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    st = st.substring(0, st.length - 1) + ';';\n    return st;\n  };\n\n  function formStars(arr) {\n    var st = '';\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = arr[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var obj = _step3.value;\n\n        if (obj.role == obj.name) st += ' ' + obj.name + ',';\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    st = st.substring(0, st.length - 1) + ';';\n    return st;\n  };\n\n  function formGenre(arr) {\n    var st = '';\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = arr[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var obj = _step4.value;\n        st += ' ' + obj.title + ',';\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    st = st.substring(0, st.length - 1) + ';';\n    return st;\n  };\n\n  function formPics(arr) {\n    var tags = '';\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n      for (var _iterator5 = arr[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n        var obj = _step5.value;\n        tags += '<img src=\"' + obj.url + '\" class=\"img-responsive\" alt=\"' + obj.type + '\" title=\"' + obj.type + '\">';\n      }\n    } catch (err) {\n      _didIteratorError5 = true;\n      _iteratorError5 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n          _iterator5.return();\n        }\n      } finally {\n        if (_didIteratorError5) {\n          throw _iteratorError5;\n        }\n      }\n    }\n\n    return tags;\n  };\n\n  function formVideo(arr) {\n    var tags = '';\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n      for (var _iterator6 = arr[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n        var obj = _step6.value;\n        tags += '<source src=\"' + obj.url + '\" type=\"video/' + obj.format + '\">';\n      }\n    } catch (err) {\n      _didIteratorError6 = true;\n      _iteratorError6 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n          _iterator6.return();\n        }\n      } finally {\n        if (_didIteratorError6) {\n          throw _iteratorError6;\n        }\n      }\n    }\n\n    tags += '<p>Please use a modern browser to view this video.</p>';\n    return tags;\n  };\n\n  function adjustVideo(id, title, x, y, poster) {\n    var width = x || 320,\n        height = y || 180,\n        item = id,\n        name = title,\n        slide = poster || \"ajax-loader.gif\",\n        instance = {},\n        time = 0;\n    var video = document.getElementById(\"mmVideo\");\n    var history = Lockr.get('storedHistory');\n    if (history) {\n      instance = history.watchedMovies.find(function (x) {\n        return x.id == item && x.title == name;\n      });\n      if (instance) {\n        time = instance.stopTime;\n      }\n    }\n    video.width = width;\n    video.height = height;\n    video.poster = slide;\n    video.currentTime = time;\n  };\n}\n\n// End of Controller\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.historyController = historyController;\n\nvar _idmaker = require('./idmaker');\n\n// // History controller has 4 main methods:\n// // 'initHistory()' for History initiation, it takes whatever is and newer from localStorage or DB\n// // 'updateHistory()' for History refreshing, both on localStorage and DB, autoupdate before page closing\n// // 'deleteHistory()' for History deleting, both on localStorage and DB\n// // 'addWatched(id,title,time)' to insert (or refresh watching date if watched already) watched movie into History,\n// // takes 2 movie properties: id && title and current time\n\n// // Comm.: Adding every movie instance into a History triggers history storing/refreshing in localStorage,\n// // DB update performs only upon leaving page / app closing. In case when error or unexpected problem prevented\n// // history saving to DB, on next run app matchs histories stored locally and remotely and choose newest.\nfunction historyController($scope, $http, $rootScope) {\n  $scope.history = {};\n  $scope.gotHistory = {};\n  $scope.storedHistory = {};\n  $scope.dropHistory = [];\n  $scope.lastVisit = new Date();\n\n  $scope.initHistory = function () {\n    $scope.getStoredHistory();\n    if ($scope.storedHistory.session_id) {\n      $scope.getHistory();\n    } else {\n      $scope.saveStoredHistory();\n    }\n    console.log(\"History successfully initiated\");\n  };\n\n  // AJAX operations with server/DB on history Collection\n  // // Get the history instance\n  $scope.getHistory = function () {\n    var id = $scope.storedHistory.session_id;\n    $http.get('/api/history/' + id).success(function (data) {\n      if (data) {\n        $scope.gotHistory = data[0];\n      }\n      $scope.formHistory();\n    }).error(function (data) {\n      console.log('Error: ' + data);\n    });\n  };\n\n  // // Post data to update / create history record\n  // // // Simple update variant - bulk update\n  $scope.updateHistory = function () {\n    if ($scope.history.session_id) {\n      $scope.history.updatedDate = new Date();\n      $scope.saveStoredHistory();\n      $http.post('/api/history', $scope.history).success(function (data) {\n        console.log('History updated in DB: ' + data);\n      }).error(function (data) {\n        console.log('Error updating DB history: ' + data);\n      });\n    }\n  };\n\n  // // Delete history from Collection in DB\n  $scope.deleteHistory = function () {\n    var id = $scope.history.session_id;\n    $http.delete('/api/history/' + id).success(function (data) {\n      $scope.deleteStoredHistory();\n      $scope.gotHistory = {};\n      $scope.refreshDropping();\n      console.log('History deleted in DB: ' + data);\n    }).error(function (data) {\n      console.log('Error deleting DB history: ' + data);\n    });\n  };\n\n  // Events for history\n\n  $rootScope.$on('movieRefreshed', function (event, args) {\n    console.log('Emited from modal', args);\n    $scope.addWatched(args[0], args[1], args[2]);\n  });\n\n  $scope.addWatched = function (id, title, time) {\n    var index = -1;\n    var watched = {};\n    watched.id = id;\n    watched.title = title;\n    watched.stopTime = time;\n    watched.watchDate = new Date();\n    if (!$scope.history.watchedMovies) {\n      console.log(\"No history found, probably was cleared by user\");\n      $scope.initHistory();\n    }\n    index = $scope.history.watchedMovies.findIndex(function (x) {\n      return x.id == id && x.title == title;\n    });\n    if (index != -1) {\n      $scope.history.watchedMovies.splice(index, 1);\n      console.log(\"Movie entry refreshed\");\n    }\n    $scope.history.watchedMovies.push(watched);\n    $scope.saveStoredHistory();\n    console.log(\"Movie array +1\");\n    $scope.refreshDropping();\n  };\n\n  $scope.formHistory = function () {\n    if ($scope.storedHistory.session_id) {\n      if (!$scope.gotHistory) {\n        $scope.history = $scope.storedHistory;\n        console.log(\"History succesfully created from stored\");\n      } else if ($scope.storedHistory.updatedDate > $scope.gotHistory.updatedDate) {\n        $scope.history = $scope.storedHistory;\n        console.log(\"History succesfully created from stored\");\n      } else {\n        $scope.history = $scope.gotHistory;\n        console.log(\"History succesfully created from stored in DB\");\n      }\n    } else {\n      $scope.history.watchedMovies = [];\n      $scope.history.creationDate = new Date();\n      $scope.history.updatedDate = new Date();\n      $scope.history.session_id = _idmaker.myID.make();\n      console.log(\"History succesfully created\");\n    }\n    console.log(\"Obj created: \");\n    console.log($scope.history);\n    $scope.refreshDropping();\n  };\n\n  $scope.saveStoredHistory = function () {\n    if (!$scope.history.session_id) {\n      $scope.formHistory();\n    };\n    Lockr.set('storedHistory', $scope.history);\n    console.log(\"History succesfully stored\");\n  };\n\n  $scope.getStoredHistory = function () {\n    $scope.storedHistory = Lockr.get('storedHistory');\n    if (!$scope.storedHistory) {\n      $scope.storedHistory = {};\n      console.log(\"No stored history found\");\n    } else console.log(\"History retrieved\");\n  };\n\n  $scope.deleteStoredHistory = function () {\n    Lockr.rm('storedHistory');\n    $scope.history = {};\n    $scope.storedHistory = {};\n    console.log(\"History deleted\");\n  };\n\n  $scope.refreshDropping = function () {\n    $scope.dropHistory = $scope.history.watchedMovies;\n    console.log('Watched: ', $scope.dropHistory);\n  };\n\n  $scope.formDropHistory = function () {\n    var container = $(\"#dropHistoryContent\");\n    var tags = '';\n    if ($scope.dropHistory && $scope.dropHistory.length > 0) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = $scope.dropHistory[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          var status = 'and stopped at ';\n          var again = 'Continue watching';\n          tags += '<li><div role=\"separator\" class=\"divider\"></div>';\n          tags += '<div><span class=\"droptitle\">' + item.title;\n          tags += '</span><span class=\"droptime\">was saved: ' + formDate(item.watchDate);\n          if (item.stopTime < 1) {\n            status = \"watched in full\";\n            again = \"Watch again\";\n          } else {\n            status += formTime(item.stopTime);\n          }\n          var index = $scope.list.findIndex(function (x) {\n            return x.id == item.id && x.title == item.title;\n          });\n          tags += '</span><span class=\"dropstatus\">' + status + '</span><span class=\"btn btn-link\" ng-click=\"expand(';\n          tags += index + ');\">' + again + '</span></div></li>';\n          $scope.lastVisit = formDate($scope.history.updatedDate);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      ;\n    } else {\n      tags += '<li><div role=\"separator\" class=\"divider\"></div>No history found</li>';\n      $scope.lastVisit = \"Never\";\n    }\n    container.empty().append(tags);\n  };\n\n  function formDate(date) {\n    var d = new Date(date);\n    var st = '';\n    st += d.getHours() + ':';\n    st += d.getMinutes() + ':';\n    st += d.getSeconds() + ' - ';\n    st += d.getDate() + '/';\n    st += d.getMonth() + '/';\n    st += d.getFullYear();\n    return st;\n  };\n\n  function formTime(time) {\n    var st = '';\n    var h = 0,\n        m = 0,\n        s = 0;\n    if (time > 3600) {\n      h = Math.floor(time / 3600);\n      time -= 3600 * h;\n      st += h + 'h ';\n    }\n    if (time > 60) {\n      m = Math.floor(time / 60);\n      time -= 60 * m;\n      st += m + 'm ';\n    }\n    s = Math.floor(time);\n    st += s + 's ';\n    return st;\n  }\n}\n// @End of history Controller\n// @Angular controller for watched movie list / history representation\n},{\"./idmaker\":5}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// @ Make a unique ID for history sessions\nvar myID = exports.myID = function () {\n    var counter = 0;\n    var id = '';\n    function _makeID() {\n        id = new Date().getTime().toString(36) + new Date().getMilliseconds().toString() + counter;\n        counter++;\n    }\n    return {\n        make: function make() {\n            _makeID();\n            return id;\n        },\n        reset: function reset() {\n            counter = 0;\n        },\n        set: function set(int) {\n            if (Number(int)) {\n                counter = parseInt(int);\n            } else {\n                counter++;\n            }\n        }\n    };\n}();\n\n// EOF\n},{}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listController = listController;\n\nvar _carouselbuilder = require('./carouselbuilder');\n\n// @Angular controller for movie list representation\n\nfunction listController($scope, $http) {\n  $scope.list = [];\n  $scope.count = 0;\n  $scope.update = {};\n  $scope.medium = 0;\n\n  // AJAX operations with server/DB on movielist Collection\n  // // Get the movie list\n  $http.get('/api/mlist').success(function (data) {\n    if (data.total > 0) {\n      $scope.list = data.entries;\n      $scope.count = data.total;\n      // Below section is to mark active/inactive class and start from the middle of the carousel list\n      $scope.medium = Math.round($scope.count / 2);\n      $scope.list.forEach(function (x) {\n        return x.active = \"\";\n      });\n      $scope.list[$scope.medium].active = \"active\";\n      // EOS\n      (0, _carouselbuilder.carouselBuilder)($scope.list, $scope.count);\n      console.log(\"Movie list downloaded from DB, carousel initiated\");\n    }\n  }).error(function (data) {\n    console.log('Error: ' + data);\n  });\n\n  // // Post data to update / create new movie instance\n  // // // Operation not supported in current API and must return error\n  $scope.updateList = function () {\n    $http.post('/api/mlist', $scope.update).success(function (data) {\n      $scope.update = {};\n      console.log('Entry inserted: ' + data);\n    }).error(function (data) {\n      console.log('Error: ' + data);\n    });\n  };\n\n  // // Delete movie instance from list in DB\n  // // // Operation not supported in current API and must return error\n  $scope.deleteListItem = function (id, id2) {\n    $http.delete('/api/mlist/' + id + '/' + id2).success(function (data) {\n      console.log('Entry deleted: ' + data);\n    }).error(function (data) {\n      console.log('Error: ' + data);\n    });\n  };\n}\n// @End of movie list Controller\n},{\"./carouselbuilder\":2}]},{},[1]);\n"],"file":"Build.js","sourceRoot":"/source/"}